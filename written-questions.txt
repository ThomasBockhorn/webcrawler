Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
    -The parser uses a linked list implementation to parse.  Linked list will not work in a concurrent system.  They are
    not thread safe since each node needs to know where the other node is.  In a concurrent system, the processor
    will assign each node through a tread.  It is not synchronous.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
        -The sequential web crawler can read more pages than the parallel web crawler.  The price is lack of depth of
        the crawl.  For instance in the sequential web crawler session, the result:
            {"wordCounts":{"data":151,"udacity":119,"learning":84,"with":62,"machine":56},"urlsVisited":8}

        The parallel web crawler session result:
            {"wordCounts":{"udacity":1384,"data":1019,"with":826,"program":765,"nanodegree":736},"urlsVisited":65}

        Urls visited changed from 8 to 65.  Concurrent systems may be slower, but they have more threads from which
        work can be done.  Single threads may be faster than concurrent systems, but you have to sacrifice the amount of
        work for speed.



    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        -If you want to parse the entire wikipedia site with a large set of key terms.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
        -The writeData method which depend on the IO writer.  One method writes to the screen.  The other to a file.
    (b) What are the join points of the Profiler in the web crawler program?
        -Both writeData methods and the wrapper method

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.
        - Abstract Factory: PageParserFactory.  The PageParserFactory is created without having to specify
        their concrete class.
        - Singleton: WordCounts/BufferedReader/BufferedWriter  These are used by both ParallelWebCrawler and SequentialWebCrawler.
        - Iterator: SequentialWebCrawler/ParallelWebCrawler  These
    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.


